openapi: 3.0.1
info:
  title: Media Scrapper
  description: |
    # Introduction
    NodeJS scrapper to sca=rape image and video source urls
  version: '1'
  x-logo:
    url: 'https://avatars2.githubusercontent.com/u/18652502?s=280&v=4'
  contact:
    email: sabbirprince39@gmail.com
servers:
  - url: http://localhost:3000/api/v1
    description: local
tags:
  - name: scrape-media
    x-displayName: Media scrape API
    description: Endpoints to work with scrape api.
  - name: get-medias
    x-displayName: Media list API
    description: Endpoints to work with media list api.
  - name: error_model
    x-displayName: Error Model
    description: |
      Errors responses are returned in the format below.
      <SchemaDefinition schemaRef="#/components/schemas/Error" />
x-tagGroups:
  - name: API
    tags:
      - get-medias
      - scrape-media
  - name: Models
    tags:
      - error_model
paths:
  /medias:
    get:
      tags:
        - get-medias
      summary: Get media info
      operationId: getMedias
      description: Get media info API
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - IMAGE
              - VIDEO
          description: media type

        - in: query
          name: searchText
          schema:
            type: string
          description: Media search text
        
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: offset value to be used for a collection

        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: The number of items to return in a collection
      security:
        - basicAuth: []
      responses:
        200:
          description: Collection of media objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    type: object
                    $ref: '#/components/schemas/Metadata'
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        type:
                          type: string
                          enum:
                            - IMAGE
                            - VIDEO
                        mediaUrl:
                          type: string
                          format: uri
                        webUrl:
                          type: string
                          format: uri
      
  /medias/scrape:
    post:
      tags:
        - scrape-media
      summary: Scrape media api
      operationId: scrapeMedia
      description: Scrape media api
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - urls
              properties:
                urls:
                  type: array
                  items:
                    type: string
                    format: uri
                    maxItems: 5
        required: true
      security:
        - basicAuth: []
      responses:
        201:
          description: Scrapped media response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    type:
                      type: string
                      enum:
                        - IMAGE
                        - VIDEO
                    mediaUrl:
                      type: string
                      format: uri
                    webUrl:
                      type: string
                      format: uri

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /spec:
    get:
      tags:
        - 'spec'
      summary: Redoc OpenAPI
      description: Renders OpenAPI specs.
      responses:
        200:
          description: Renders OpenAPI specs.
          content: {}
  /spec/raw:
    get:
      tags:
        - 'spec'
      summary: OpenAPI spec
      description: Returns raw OpenAPI specs.
      responses:
        200:
          description: Return the API specification
          content: {}

components:
  schemas:
    Metadata:
      type: object
      required:
        - pagination
      properties:
        pagination:
          type: object
          required:
            - offset
            - limit
            - previousOffset
            - nextOffset
            - currentPage
            - pageCount
            - totalCount
          properties:
            offset:
              type: integer
              default: 0

            limit: 
              type: integer
              default: 10

            previousOffset:
              type: integer
              nullable: true

            nextOffset:
              type: integer
              default: null

            currentPage:
              type: integer
              default: null

            pageCount: 
              type: integer
              default: 1

            totalCount:
              type: integer
              default: 0   
    Error:
      type: object
      required:
        - 'code'
        - 'message'
        - 'timestamp'
      properties:
        code:
          type: string
          description: Error code
          example: bad.request
        message:
          type: string
          description: Human readable message
          example: request.query.limit should be <= 100
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the error
          example: 2021-08-13T06:00:00Z
        detail:
          type: array
          description: A list of child errors. Only applicable to 400 bad.request
          items:
            type: object
            properties:
              code:
                type: string
                description: Child error code
                example: null.value
              path:
                type: string
                description: path of bad request field
                example: .query.limit
              message:
                type: string
                description: Human readable message
                example: should be <= 100

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

